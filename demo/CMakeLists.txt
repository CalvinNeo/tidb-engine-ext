cmake_minimum_required(VERSION 3.12)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread -std=c++17")
set(CMAKE_FIND_LIBRARY_SUFFIXES .a ${CMAKE_FIND_LIBRARY_SUFFIXES})
project(RaftStoreDemo)

message(STATUS "Building for: ${CMAKE_SYSTEM}")
message(STATUS "Cmake build type: ${CMAKE_BUILD_TYPE}")
if (CMAKE_SYSTEM MATCHES "^(Darwin.*)")
    set(SYS_DARWIN 1)
endif ()

set(Protobuf_USE_STATIC_LIBS ON)
find_package(Protobuf REQUIRED)
message(STATUS "Using protobuf: ${PROTOBUF_INCLUDE_DIRS}, ${PROTOBUF_LIBRARIES}")
include_directories(${PROTOBUF_INCLUDE_DIRS})

set(OPENSSL_USE_STATIC_LIBS ON)
find_package(OpenSSL)
if (NOT OpenSSL_FOUND)
    if (APPLE)
        set(OPENSSL_ROOT_DIR "/usr/local/opt/openssl")
    else ()
        unset(OPENSSL_USE_STATIC_LIBS)
    endif ()
endif ()
find_package(OpenSSL REQUIRED)
message(STATUS "Using OpenSSL: ${OPENSSL_INCLUDE_DIRS}, ${OPENSSL_LIBRARIES}")

find_package(gRPC REQUIRED)
message(STATUS "Using gRPC: ${gRPC_VERSION}")

add_subdirectory(third-party/kvproto/cpp)

add_library(Server ProxyFFI.cpp GrpcService.cpp Common.cpp)
target_link_libraries(Server PUBLIC kvproto ${PROTOBUF_LIBRARIES} gRPC::grpc++)
if (NOT SYS_DARWIN)
    target_link_libraries(Server PUBLIC -static-libstdc++)
endif ()

if (NOT RUN_UNIT_TEST)
    add_executable(RaftStoreDemo main.cpp)
    target_link_libraries(RaftStoreDemo PUBLIC Server)
    set(RAFTSTORE_PROXY_LIB_PATH ${CMAKE_SOURCE_DIR}/libs/raft-store-proxy)
    set(RAFTSTORE_PROXY_LIBRARY "RAFTSTORE_PROXY_LIBRARY-NOTFOUND")
    find_library(RAFTSTORE_PROXY_LIBRARY NAMES raftstore_proxy HINTS ${RAFTSTORE_PROXY_LIB_PATH})
    target_link_libraries(RaftStoreDemo PRIVATE ${RAFTSTORE_PROXY_LIBRARY})
    if (NOT SYS_DARWIN)
        target_link_libraries(RaftStoreDemo PRIVATE stdc++fs)
    endif ()
else ()
    message(STATUS "Run unit test")
    add_executable(UnitTest Test.cpp)
    target_link_libraries(UnitTest PUBLIC Server)
endif ()